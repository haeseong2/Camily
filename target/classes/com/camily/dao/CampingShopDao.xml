<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.camily.dao.CampingShopDao" >

 <!-- index 화면 new item (SELECT) -->
 <select id="homeList" resultType="com.camily.dto.GoodsDto">
  SELECT*
  FROM GOODS
  ORDER BY GCODE DESC
 </select>

 <!-- index 화면 new camping (SELECT) -->
 <select id="homeList2" resultType="com.camily.dto.CampingDto">
  SELECT C.*, RCCOUNT.RESERVECOUNT
  FROM CAMPING C
  INNER JOIN (SELECT RECOUNT.RECACODE, COUNT(*) AS RESERVECOUNT
            FROM (  SELECT DISTINCT RECACODE, RECODE
                    FROM RESERVATION) RECOUNT
            GROUP BY RECACODE) RCCOUNT ON RCCOUNT.RECACODE = C.CACODE
            WHERE C.CASTATE = 1
     ORDER BY RCCOUNT.RESERVECOUNT DESC 
 </select>
 <!-- 캠핑 용품 상세 페이지 이동 요청 (SELECT) -->
 <select id="campingDetail" resultType="com.camily.dto.GoodsDto">
  SELECT* 
  FROM GOODS
  WHERE GCODE = #{gcode}
 </select>
 
 <!-- 캠핑용품 검색 기능 -->
 <select id="searchShop" resultType="com.camily.dto.GoodsDto">
  SELECT*
  FROM GOODS
  WHERE GNAME LIKE '%'||#{search}||'%'
 </select>
  
 <!-- 캠핑 구매 요청 페이지 이동요청 (SELECT) B -->
 <select id="campingpurchase" resultType="com.camily.dto.GoodsDto">
   SELECT* 
   FROM GOODS
   WHERE GCODE = #{gcode}
 </select>
  
 <!-- 구매 요청 페이지 이동하기 전에 세션 아이디를 이용해서 주소 찾기 ( 위에거 연장선 ) (SELECT) B -->
 <select id="addselect" resultType="com.camily.dto.MemberDto">
   SELECT*
   FROM MEMBERS
   WHERE MID = #{loginId}
 </select>
 
 <!-- 구매 코드 최대값 생성 (SELECT) C -->
 <select id="MaxGocode" resultType="String">
   SELECT MAX(GOCODE) 
   FROM GOODSORDER
 </select>
 
 <!-- 캠핑 용품 구매하기 구매 코드 생성한거 가지고 사용함 (INSERT) C -->
 <insert id="goodsPurchase">
   INSERT INTO GOODSORDER(GOCODE, GOMID, GOMADDR, GOGCODE, GOAMOUNT, GOPRICE, GONAME, GOIMAGE, GOSTATE, GODATE)
   VALUES(#{gocode}, #{loginId}, #{addr}, #{gogcode}, #{gamount}, #{totalPrice}, #{gname}, #{gimage}, 2, SYSDATE)
 </insert>
 
 <!-- 구매가 성공 했으면 장바구니 삭제 (DELETE) -->
 <delete id="shoppingbasket">
  DELETE FROM DETAILINFORMATION
  WHERE DICODE = #{gogcode}
  AND DIMID = #{loginId}
 </delete>
 
 <!-- 구매내역 보기 (SELECT) 페이징 처리 -->
 <select id="PurchaseList" resultType="com.camily.dto.GoodsOrderDto">
 	SELECT * 
	FROM (	SELECT ROWNUM RN, GOODSORDER.*
	      	FROM (	SELECT * 
	            	FROM GOODSORDER 
                    WHERE GOSTATE BETWEEN 2 AND 7
                    OR GOSTATE = 9
	            	ORDER BY GODATE DESC) GOODSORDER
	      	WHERE GOMID = #{loginId})
	WHERE RN BETWEEN #{startRow} AND #{endRow}
 

 	<!-- SELECT * 
	FROM (	SELECT ROWNUM RN, GOODSORDER.*
	      		FROM (	SELECT * 
	            			FROM GOODSORDER 
	            			ORDER BY GODATE DESC) GOODSORDER
	      		WHERE GOMID = #{loginId})
	WHERE GOSTATE BETWEEN 2 AND 7
	OR GOSTATE = 9
	AND RN BETWEEN #{startRow} AND #{endRow} -->
	
<!-- ORDER BY GODATE DESC -->
 </select>
 
 <!-- 구매목록페이지 페이징처리 -->
 <select id="getCampTotalCount2" resultType="int">
    SELECT COUNT(*)
	FROM GOODSORDER 
    WHERE (GOMID = #{loginId} AND GOSTATE BETWEEN 2 AND 7)
    OR (GOSTATE = 9 AND GOMID = #{loginId})
 </select>
 
 <!-- 구매목록 삭제하기 dao 호출 (UPDATE) -->
 <delete id="deleteph">
  UPDATE GOODSORDER SET GOSTATE = 8 <!-- 8은 삭제 했을때 값 안보여주기위해서 참조키때문 -->
  WHERE GOCODE = #{gocode} AND GOSTATE = #{gostate}
 </delete>
 
 <!-- 캠핑 용품 (SELECT) AA -->
 <select id="getCampingInfo" resultType="com.camily.dto.GoodsDto">
  SELECT*
  FROM GOODS
  WHERE GCODE = #{gcode}
 </select>

 <!-- 찜클릭 state값 증가 ajax (INSERT) 캠핑용품에서 필요한 값 가져 온것 AA -->
 <insert id="cartInsert">
   INSERT INTO GOODSORDER(GOCODE, GOMID, GOGCODE, GOPRICE, GONAME, GOIMAGE, GOAMOUNT, GOSTATE)
   VALUES(#{gocode}, #{loginId}, #{gcode}, #{gorice}, #{goname}, #{goimage}, 1, 1)
 </insert>	
 
 <!-- 찜목록 보기 (SELECT) -->
 <select id="cartselect" resultType="com.camily.dto.GoodsOrderDto">
  SELECT*
  FROM GOODSORDER
  WHERE GOMID = #{loginId} AND GOSTATE = 1
 </select>
 
 <!-- 찜삭제 (UPDATE) -->
 <delete id="calldibs">
  DELETE FROM GOODSORDER
  WHERE GOMID = #{loginId} AND GOCODE = #{gocode} AND GOSTATE = 1
 </delete>
 
 <!-- 장바구니 추가하기 전 장바구니 안에 같은 물건이 있는지 없는지 아이디로 확인 (SELECT) ZZ -->
 <select id="selectdto" resultType="com.camily.dto.CampingDetailInformationDto">
  SELECT*
  FROM DETAILINFORMATION
  WHERE DICODE = #{dicode} AND DIMID = #{loginId}
 </select>
 
 <!-- 값이 없으면 장바구니 추가 (INSERT) ZZ -->
 <insert id="insertinformation">
  INSERT INTO DETAILINFORMATION(DIMID, DICODE, DINAME, DIIMAGE, DIAMOUNT, DIADDR, DIPRICE, DITOTALPRICE)
  VALUES(#{loginId}, #{dicode}, #{diname}, #{diimage}, #{diamount}, #{diaddr}, #{diprice}, #{ditotalprice}) 
 </insert>
  
 <!-- 값이 있으면 해당하는 상품이 있으니까 수량만 늘려줌 (UPDATE) ZZ -->
 <update id="update">
  UPDATE DETAILINFORMATION 
  SET DIAMOUNT = DIAMOUNT + #{diamount},
  DITOTALPRICE = DITOTALPRICE + #{ditotalprice2}
  WHERE DIMID = #{loginId} 
  AND DICODE = #{dicode}
 </update>
  
 <!-- 장바구니 목록 페이지 출력 (SELECT) -->
 <select id="detailinformation" resultType="com.camily.dto.CampingDetailInformationDto">
   SELECT DI.*, G.GSTATE
   FROM DETAILINFORMATION DI
   INNER JOIN GOODS G ON G.GCODE = DI.DICODE
   WHERE DIMID = #{loginId}
 </select>
  
 <!-- 장바구니 들어 있는 모든 값 (INSERT) -->
 <insert id="totalpurchase">
  INSERT INTO GOODSORDER(GOCODE, GOMID, GOMADDR, GOGCODE, GOAMOUNT, GOPRICE, GONAME, GOIMAGE, GOSTATE, GODATE)
  VALUES(#{gocode}, #{gomid}, #{gomaddr}, #{gogcode}, #{goamount}, #{goprice}, #{goname}, #{goimage}, 2, SYSDATE)
 </insert>
 
 <!-- 장바구니에 있는 값을 구입하면 해당하는 장바구니 목록 삭제 (DELETE) -->
 <delete id="totalbasket">
  DELETE FROM DETAILINFORMATION
  WHERE DIMID = #{gomid}
  AND DICODE = #{gogcode}
 </delete>
 
 <!-- 장바구니 삭제 (DELETE) -->
 <delete id="deletepoket">
  DELETE FROM DETAILINFORMATION
  WHERE DICODE = #{dicode}
 </delete>

 <!-- 구매확정 (UPDATE) -->
 <update id="phDecide">
  UPDATE GOODSORDER SET GOSTATE = 5
  WHERE GOCODE = #{gocode}
 </update>
 
 <!-- 주문 취소 (DELETE) -->
 <delete id="PurchaseDelete">
  DELETE FROM GOODSORDER
  WHERE GOCODE = #{gocode}
 </delete>
 
 <!-- 취소요청 하기 STATE 6 관리자 기달리기 (UPDATE) -->
 <update id="cancelreasonput">
  UPDATE GOODSORDER SET 
  GOSTATE = 6,
  GOCANCEL = #{gocancel}
  WHERE GOCODE = #{gocode}
 </update>
 
 <select id="getGoodsQnATotalCount" resultType="int">
 	SELECT COUNT(*) FROM GOODSQUESTION
 </select>
 
 <select id="goodsQuestionList" resultType="com.camily.dto.GoodsQnADto">
	<!-- SELECT GQ.*, GW.*
	FROM GOODSQUESTION GQ  
	LEFT OUTER JOIN GOODSANSWER GW ON
	GQ.GQCODE = GW.GWGQCODE AND GQ.GQGCODE = #{gcode}
	ORDER BY GQ.GQDATE DESC -->
	SELECT *
	FROM (	SELECT ROWNUM RN, QNA.* 
		       	FROM (	SELECT GQ.*, GW.*
							FROM GOODSQUESTION GQ  
							LEFT OUTER JOIN GOODSANSWER GW ON GQ.GQCODE = GW.GWGQCODE 
							WHERE GQ.GQGCODE = #{gcode}
							ORDER BY GQ.GQDATE DESC) QNA )
	WHERE RN BETWEEN #{startRow} AND #{endRow}
 </select>
 
 <select id="getMaxGqcode" resultType="string">
  SELECT MAX(GQCODE) 
  FROM GOODSQUESTION
 </select>
 
 <insert id="goodsQuestionWrite">
  INSERT INTO GOODSQUESTION(GQCODE,GQGCODE,GQMID,GQCONTENTS,GQDATE,GQSTATE)
  VALUES (#{gqcode}, #{gqgcode}, #{gqmid}, #{gqcontents}, SYSDATE, 1)
 </insert>
 
 <update id="goodsQuestionModify">
  UPDATE GOODSQUESTION 
  SET GQCONTENTS = #{gqcontents}
  WHERE GQCODE = #{gqcode}
 </update>
 
 <select id="getGoodsQuestionInfo" resultType="com.camily.dto.GoodsQnADto">
  SELECT * 
  FROM GOODSQUESTION
  WHERE GQCODE = #{gqcode}
 </select>
 
  <update id="modifyGoodsQuestionState">
  UPDATE GOODSQUESTION
  SET GQSTATE = 0
  WHERE GQCODE = #{gqcode}
  </update>
</mapper>

    




 
  